# -*- mode: sh -*-

# Emacs tramp
if [[ "$TERM" == "dumb" ]]
then
    unsetopt zle
    unsetopt prompt_cr
    unsetopt prompt_subst
    PS1='$ '
    return
fi

# {{{ Oh My Zsh
# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh
export LC_ALL='en_US.UTF-8'
export ALTERNATE_EDITOR="vim"
export SYSTEMD_EDITOR="emacsclient -c"
export EDITOR="emacsclient -c"
export SUDO_EDITOR="emacsclient -c"
export VISUAL="emacsclient -c"


# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
# ZSH_THEME="robbyrussell"
ZSH_THEME="bira"


# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"
DISABLE_AUTO_UPDATE=true

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

plugins=(git fasd gitfast common-aliases wd safe-paste docker)
if [ -f "/etc/arch-release" ]; then
    plugins+=(archlinux)
    export SSH_AUTH_SOCK=/run/user/1000/ssh-agent.socket
elif `which ssh-agent &>/dev/null`; then
    plugins+=(ssh-agent)
fi
if ! which systemctl >/dev/null 2>&1; then
    plugins+=(systemd)
fi
# Use j <dirspec>
#plugins=(git composer fasd gitfast)

source $ZSH/oh-my-zsh.sh
if [[ -f /etc/profile.d/fzf.zsh ]] ; then
    source /etc/profile.d/fzf.zsh
fi

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# }}}
# {{{ gpg-agent 2.1+
export GPG_TTY=$(tty)
# }}}
# {{{ Aliases
alias myzsh="$EDITOR ~/dotfiles/zsh/zshrc && reload"
alias view=vim -R
alias reload=". ~/.zshrc"
alias v='f -e vim' # quick opening files with vim
alias gl='git --no-pager log --oneline --graph -5'
alias gpush='git push'
alias tmux='tmux -2'
alias mk='mkdir -p'
alias s="sudo "
alias sus="systemctl suspend"
alias -g G="| grep -i"
alias -g L="| less -R"
alias -g H="| ack --passthru "
alias -g F="| fpp"
alias ack="ack --pager='less -RFSX'"
alias luarc="$EDITOR ~/.config/awesome/rc.lua"
alias fx='setxkbmap -layout "us,ru" -option "grp:ctrl_shift_toggle" -option ctrl:nocaps'
alias help='man'
alias cal='cal -m'
alias dmesgl='dmesg --color=always | less -R'
alias ll='ls -hlAt'
alias mp='mplayer'
alias ag='ag --color'
alias pia='ping ya.ru'
alias pil='ping lislon.ru'
alias bb='sudo /usr/bin/shutdown now'
alias bbr='sudo /usr/bin/shutdown -r now'
alias bbh='systemctl suspend'
alias svim='sudo -E vim'
alias cx='chmod +x'
alias feh='feh --scale-down'
alias -s pdf='xdg-open'
alias emax="emacsclient -nw"                      # used to be "emacs -nw"
alias e="emacsclient -c"
#alias semac="sudo emacsclient -t"                # used to be "sudo emacs -nw"
#alias emacs="emacsclient -c -a emacs"           # new - opens the GUI with alternate non-daemon
alias sc-cat='systemctl cat'
alias sc-user-dr='systemctl --user daemon-reload'

alias drm='docker rm'
alias di='docker inspect'
alias dps='docker ps'

function git-pr() {
    git fetch -fu origin refs/pull/$1/head:pr/$1
    git checkout pr/$1
}
function git-prc() {
    git for-each-ref refs/heads/pr/* --format='%(refname)' | \
        while read ref; do git branch -D ${ref#refs/heads/}; done
}

function recent {
    find . -maxdepth 2 -type f -mtime -${1:-1}
}

function trash {
    mkdir -p /tmp/trash
    mv $1 /tmp/
}

# Run emacs with sudo
function se {
    emacsclient -c /sudo::$*
}
# play bell sound (at the end of long commands)
bell() {
    (notify-send "Command complete $1" &
        aplay ~/bin/ding.wav 2>/dev/null &)
}

alias ding=bell
alias r=reload

# OS-depend aliases
if `which pacman &>/dev/null`; then
    alias i="sudo pacman -S"
    function is { pacman -Ss $1 H $1 }
    alias ir="sudo pacman -Rsu"
    alias ya="yaourt -S"
    alias yac="yaourt --noconfirm -S"
    function yas { yaourt --color -Ss $1 H $1 }
    alias yad="yaourt -Rsun"
elif `which apt-get &>/dev/null`; then
    alias i="sudo apt-get install"
    alias is="sudo apt-get search"
elif `which yum &>/dev/null`; then
    alias i="sudo yum install"
    alias is="sudo yum search"
fi
# }}}
# {{{ Settings

fpath=(~/dotfiles/zsh/functions $fpath)

export ENV='development'
export HISTSIZE=15000
export HISTFILE="$HOME/.history"
export SAVEHIST=$HISTSIZE
#export EDITOR='vim'
# locate / | fzf
#    c-v open in vim
#    c-V sudiedit
export FZF_DEFAULT_OPTS='--extended --cycle '
setopt extended_glob
setopt rc_expand_param
setopt correct
setopt interactivecomments
setopt share_history
setopt no_beep
unsetopt case_glob

autoload -Uz run-help
autoload run-help-git
autoload run-help-sudo
autoload run-help-docker

# Terminal in emacs do not show nice glyphs :( --workaround
if [[ -n ${INSIDE_EMACS} ]]; then
    # This shell runs inside an Emacs *shell*/*term* buffer.
    #prompt walters
    unsetopt zle
    PS1='%{$terminfo[bold]$fg[green]%}%n@%m%{$reset_color%} %{$terminfo[bold]$fg[blue]%}%~%{$reset_color%} $ '
else
    #Fix backspace issue when using rxvt + ssh
    export TERM='xterm'
fi

# Show stats if commands takes longer then 10 sec
REPORTTIME=10
# }}}
# {{{ Autocompletion
# zstyle :completion:function:completer:command:argument:tag
zstyle ':completion:::::' completer _expand _complete _approximate _ignored
zstyle ':completion:*:approximate:*' max-errors \
    'reply=( $(( ($#PREFIX+$#SUFFIX)/3 )) )'
# autocomplete one way readme -> README, but not README -> readme
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
# Ignore same arguments twice
zstyle ':completion:*:(rm|vi|vim):*' ignore-line true
zstyle ':completion::*' ignore-parents parent pwd
zstyle ':completion:*:(vi|vim):*' ignored-patterns '*.(pdf|ps|dvi|aux)'
zstyle ':completion:*:(node):*' file-patterns '*.js'
zstyle ':completion:*:(coffee):*' file-patterns '*.coffee'
zstyle ':completion:*:(node):*' ignored-patterns 'Gruntfile.js'

# -g = glob pattern, (-.) glob modifier to allow only files or symlinks
compdef '_files -g "*.jpg(-.)"' gimp
# }}}
# {{{ Man in vim
export MANPAGER="/bin/sh -c \"col -b | vim -u ~/dotfiles/zsh/man.vimrc -c 'set nomodified' -\""
# }}}
# {{{ Misc

bakup () {
    cp "$1" "$1.bak" && echo "Made backup $1.bak"
}
bak () {
    mv "$1" "$1.bak" && echo "$1 -> $1.bak"
}
# book () {
#     cp "$1" /media/photos/Elephant/Documents/Books/
# }

# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fe() {
    local file
    file=$(fzf --query="$1" --select-1 --exit-0)
    [ -n "$file" ] && ${EDITOR:-vim} "$file"
}

# Modified version where you can press
#   - CTRL-O to open with `open` command,
#   - CTRL-E or Enter key to open with the $EDITOR
fo() {
    local out file key
    out=$(fzf-tmux --query="$1" --exit-0 --expect=ctrl-o,ctrl-e)
    key=$(head -1 <<< "$out")
    file=$(head -2 <<< "$out" | tail -1)
    if [ -n "$file" ]; then
        [ "$key" = ctrl-o ] && open "$file" || ${EDITOR:-vim} "$file"
    fi
}

# Move to last made photos
alias cd-last-photos="/media/photos/Photos/Everyday/*(oc[1,1])"


# # fd - cd to selected directory
# fd() {
#     local dir
#     dir=$(find ${1:-*} -path '*/\.*' -prune \
#                -o -type d -print 2> /dev/null | fzf +m) && cd "$dir"
# }

# fda - including hidden directories
fda() {
    local dir
    dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
}

# cdf - cd into the directory of the selected file
cdf() {
    local file
    local dir
    file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
}

fag() {
   ag --hidden --nobreak --nonumbers --noheading --depth 5 . | fzf
}

mkdircd() {
    mkdir -p $1 && cd $1
}

writecmd() {
    perl -e '$TIOCSTI = 0x5412; $l = <STDIN>; $lc = $ARGV[0] eq "-run" ? "\n" : ""; $l =~ s/\s*$/$lc/; map { ioctl STDOUT, $TIOCSTI, $_; } split "", $l;' -- $1
}

make-bin-link() {
    if [[ -f "~/bin/${1:t}" ]] ; then
        mv "$1" ~/confiles/linux/bin/
        ln -s ~/confiles/linux/bin/${1:t} ~/bin/${1:t}
        echo "link done ~/bin/${1:t} -> ~/confiles/linux/bin/${1:t}"
    else
        echo "File already exists"
    fi
}

make-systemd-link() {
    if [[ -f ~/.config/systemd/user/$1 ]] ; then
        mv ~/.config/systemd/user/$1 ~/confiles/linux/config/systemd/user/
        ln -s ~/confiles/linux/config/systemd/user/${1:t} ~/.config/systemd/user/${1:t}
        echo "link done ~/confiles/linux/config/systemd/user/${1:t} -> ~/.config/systemd/user/${1:t}"
    else

        echo "no such user service ~/.config/systemd/user/$1"
    fi
}

fzf-locate() { locate "*" | fzf -e }
fzf-playonlinux() { playonlinux --run '$(ls ~/.PlayOnLinux/shortcuts | fzf -e)' ;}

# Transponse two command arguments before cursor.
widget-transponse-args() {
    # z flag is for split string as shell parsing to find words
    array=${(z)LBUFFER}
    count=${#array}
    if [[ $count > 1 ]] ; then
        LBUFFER="${array[@]:0:$(($count - 2))} ${array[$count]} ${array[$(($count - 1))@]}"
    fi
}

zle -N widget-transponse-args

bindkey '^T' widget-transponse-args

# Allow multi-selections from menu using Ctrl+o
bindkey -M menuselect '\C-o' accept-and-menu-complete
bindkey '\C-i' complete-word
bindkey '\e#' pound-insert

# autoload -U -- ~/dotfiles/.zshfunc/[^_]*(:t)

# Ctrl-X, U - and you can enter any name of widget to execute
bindkey '\C-xu' universal-argument
#bindkey '^R' history-incremental-search-backward


# C-S inserts sudo before line
insert_sudo () { zle beginning-of-line; zle -U "sudo " }
zle -N insert-sudo insert_sudo
bindkey "^[s" insert-sudo

function dir-up { cd ..; zle reset-prompt }
zle -N dir-up
bindkey "^h" dir-up


function dir-back { cd -1; zle reset-prompt }
zle -N dir-back
bindkey "^l" dir-back
bindkey "^L" clear-screen

# bindkey "^T" fzf-locate

#export NVM_DIR="$HOME/.nvm"
#[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm

export FZF_DEFAULT_OPTS=--extended-exact


# Auto ls on RET
function my-lsret {
    [[ -z $BUFFER ]] && BUFFER='ls'; zle accept-line
}
zle -N my-lsret
bindkey "" my-lsret

# Calculator
alias calc=python

if [[ -f ~/.zshrc_local ]] ; then
    source ~/.zshrc_local
fi

# Ctrl+SPC - find mark, Ctrl+K - add mark, Ctrl+T - jump to next field
MARKER_DATA_HOME=$HOME/confiles/linux/config/marker/marks.txt
[[ -s "$HOME/.local/share/marker/marker.sh" ]] && source "$HOME/.local/share/marker/marker.sh"

# find
function ff {
    echo find ${2} -iname "$1" 2>/dev/null
}

# I use my own upgrade in ~/bin
type upgrade >/dev/null  && unset -f upgrade


# }}}

x-copy-region-as-kill () {
    zle copy-region-as-kill
    print -rn $CUTBUFFER | xsel -b -i
}
zle -N x-copy-region-as-kill
bindkey -e '\ew' x-copy-region-as-kill
bindkey -e '^W' x-copy-region-as-kill
