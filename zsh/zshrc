# -*- mode: sh -*-


init-base-settings() {
    setopt extended_glob
    setopt rc_expand_param
    setopt correct
    setopt interactivecomments
    setopt share_history
    setopt no_beep
    unsetopt case_glob

    fpath=(~/dotfiles/zsh/functions $fpath)

    export ENV='development'
    export HISTSIZE=15000
    export HISTFILE="$HOME/.history"
    export SAVEHIST=$HISTSIZE
    # Do I need this here?
    # export GPG_TTY=$(tty)

    # export FZF_DEFAULT_OPTS='--extended --cycle '
    export FZF_DEFAULT_OPTS='--extended-exact'
    # Show stats if commands takes longer then 10 sec
    REPORTTIME=10

    # help with cluttering sudo when running help with C-h
    autoload -U run-help
    autoload run-help-sudo
    autoload run-help-git
    autoload run-help-docker
    if which run-help | grep aliased >/dev/null 2>&1; then
        unalias run-help
    fi


    # Vim for tty
    if [[ -n "$SSH_TTY" ]] ; then
        MAINEDITOR="vim"
        alias se=sudoedit
    else
        MAINEDITOR="$HOME/bin/shared/emacs-open-in-client"
        alias se=sudoedit
        # Run emacs with sudo
        # se() {
        #     emacsclient -c /sudo::$*
        # }
    fi

    # smokeping is complaining. Better to use LANG instead of LC_ALL
    # https://www.google.ru/search?client=opera&q=Resetting+LC_NUMERIC+failed+probably+because+your+international+setup+of+the&sourceid=opera&ie=UTF-8&oe=UTF-8
    # export LC_ALL='en_US.UTF-8'

    export ALTERNATE_EDITOR="vim"
    export SYSTEMD_EDITOR=$MAINEDITOR
    export EDITOR=$MAINEDITOR
    export SUDO_EDITOR=$MAINEDITOR
    export VISUAL=$MAINEDITOR
    export MANPAGER="/bin/sh -c \"col -b | vim -u ~/dotfiles/zsh/man.vimrc -c 'set nomodified' -\""

    zstyle ':completion:::::' completer _expand _complete _approximate _ignored
    zstyle ':completion:*:approximate:*' max-errors \
           'reply=( $(( ($#PREFIX+$#SUFFIX)/3 )) )'

    # autocomplete one way readme -> README, but not README -> readme
    zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

    # Ignore same arguments twice
    zstyle ':completion:*:(rm|vi|vim):*' ignore-line true
    zstyle ':completion::*' ignore-parents parent pwd
    zstyle ':completion:*:(vi|vim):*' ignored-patterns '*.(pdf|ps|dvi|aux)'
    zstyle ':completion:*:(node):*' file-patterns '*.js'
    zstyle ':completion:*:(coffee):*' file-patterns '*.coffee'
    zstyle ':completion:*:(node):*' ignored-patterns 'Gruntfile.js'

    # -g = glob pattern, (-.) glob modifier to allow only files or symlinks
    if [ type compdef 2>/dev/null ] ; then
        compdef '_files -g "*.jpg(-.)"' gimp
    fi
}

init-oh-my-zsh() {

    if [[ ! -d $HOME/.oh-my-zsh ]] ; then
        return
    fi
    export ZSH=$HOME/.oh-my-zsh

    # Look in ~/.oh-my-zsh/themes/
    # Optionally, if you set this to "random", it'll load a random theme each
    # time that oh-my-zsh is loaded.
    # ZSH_THEME="robbyrussell"
    ZSH_THEME="bira"

    # Uncomment the following line to display red dots whilst waiting for completion.
    COMPLETION_WAITING_DOTS="true"
    DISABLE_AUTO_UPDATE=true

    # Uncomment the following line if you want to disable marking untracked files
    # under VCS as dirty. This makes repository status check for large repositories
    # much, much faster.
    # DISABLE_UNTRACKED_FILES_DIRTY="true"

    plugins=(git fasd gitfast common-aliases wd safe-paste docker)
    if [ -f "/etc/arch-release" ]; then
        # I do not want to hide pacupg binary with alias
        # plugins+=(archlinux)
        export SSH_AUTH_SOCK=/run/user/1000/ssh-agent.socket
        # elif `which ssh-agent &>/dev/null`; then
        #     plugins+=(ssh-agent)
    fi
    if which systemctl &>/dev/null; then
        plugins+=(systemd)
    fi
    # Use j <dirspec>
    #plugins=(git composer fasd gitfast)

    source $ZSH/oh-my-zsh.sh
}


init-fzf() {
    [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
    if [[ -f /etc/profile.d/fzf.zsh ]] ; then
        source /etc/profile.d/fzf.zsh
    fi
}

init-simple-aliases() {
    alias myzsh='$EDITOR ~/dotfiles/zsh/zshrc && reload'
    alias view=vim -R
    alias reload=". ~/.zshrc"
    alias microdate="date +\"%T.%N\""
    alias v='f -e vim' # quick opening files with vim
    alias gl='git --no-pager log --oneline --graph -5'
    alias gpush='git push'
    alias tmux='tmux -2'
    alias mk='mkdir -p'
    alias sa='ssh-add'
    alias s="sudo "
    alias sus="systemctl suspend"
    alias -g G="| grep -i"
    alias -g L="| less -R"
    alias -g H="| ack --passthru "
    alias -g F="| fpp"
    alias -g cp1251="iconv -f 'windows-1251' -t 'utf-8'"
    alias ack="ack --pager='less -RFSX'"
    alias fx='setxkbmap -layout "us,ru" -option "grp:ctrl_shift_toggle" -option ctrl:nocaps'
    alias help='man'
    alias cal='cal -m'
    alias dmesgl='dmesg --color=always | less -R'
    alias ll='ls -hlAt --group-directories-first'
    alias mp='mpv'
    alias cdd='cd ~/Downloads'
    alias pia='ping ya.ru'
    alias pil='ping lislon.ru'
    alias ytmp3='youtube-dl --extract-audio --audio-quality 0 --audio-format mp3 ' # works for playlists too
    alias bb='sudo /usr/bin/shutdown now'
    alias bbr='sudo /usr/bin/shutdown -r now'
    # alias bbh='_emacs-clock-out && systemctl suspend'
    alias bbh='systemctl suspend'
    alias иир='_emacs-clock-out && systemctl suspend'
    alias emacsrestart='systemctl --user restart emacs-daemon'
    alias emacsstop='systemctl --user stop emacs-daemon'
    alias svim='SUDO_EDITOR=vim sudoedit'
    alias cx='chmod +x'
    alias -g copy='xclip -selection clipboard -f | xclip -selection p'
    alias feh='feh -G --scale-down \
        --thumb-height 256 --thumb-width 256 --cache-thumbnails \
        --action2 ";~/bin/arch/feh/clipboard %F" \
        --action3 ";~/bin/arch/feh/fav %F" \
        --action4 ";~/bin/arch/feh/unfav %F" \
        --action5 "~/bin/arch/feh/rename %F" \
        '
#     alias feh='feh -G --scale-down \
# --action1 "readlink -f %F | xclip -selection p" \
# --action2 "mkdir p" \
# --action3 "NAME=\$(zenity --entry) && echo cp %F \"\$(dirname %F)/$NAME\""'
    alias -s pdf='xdg-open'
    alias -s html='chromium'
    alias emax="emacsclient -nw"                      # used to be "emacs -nw"
    alias e="$EDITOR"
    alias open="xdg-open"
    #alias semac="sudo emacsclient -t"                # used to be "sudo emacs -nw"
    #alias emacs="emacsclient -c -a emacs"           # new - opens the GUI with alternate non-daemon
    alias sc-cat='systemctl cat'
    alias sc-user-dr='systemctl --user daemon-reload'
    alias sc-dr='sudo systemctl daemon-reload'
    alias jc='sudo journalctl -u'
    alias jf='sudo journalctl -f'
    alias -g DN=/dev/null
    alias -g BOTH=2>&1
    alias calc=python
    alias mail=mutt
    alias restore=~/bin/backup/recover
    alias o=xdg-open
    alias jl='sudo journalctl -b 0 --no-pager | tail'
    alias myip='curl ipinfo.io/ip; curl ipinfo.io/city'
    alias rs='rsync --progress -r'
    alias simple-server='python3 -m http.server'
    alias drm='docker rm'
    alias di='docker inspect'
    alias dps='docker ps'
    # Long task: C-z fg && beep
    alias ding=bell
    alias beep=bell
    alias r=reload
    alias fix-null='sudo /bin/sh -c "rm -f /dev/null; mknod -m 666 /dev/null c 1 3"'
    # Move to last made photos
    alias cd-last-photos='/media/photos/Photos/Everyday/*(oc[1,1])'
    alias sc-status-vpn="sc-status openvpn-client@\*"
    alias sc-stop-vpn='sc-stop $(systemctl show openvpn-client@\* --state active -p Id --value)'
    function sc-start-vpn { sc-start openvpn-client@$1 }
    alias sc-restart-vpn='ACTIVE=$(systemctl show openvpn-client@\* --state active -p Id --value); sc-restart $ACTIVE'
    # Start docker with openvpn running
    alias music="urxvt -name urxvt.ncmpcpp -e ncmpcpp"
    alias ipl="sudo iptables -L -n"

    # OS-depend aliases
    if `which pacman &>/dev/null`; then
        alias i="sudo pacman -S"
        function is { pacman -Ss $1 | ack --passthru $1 }
        alias ir="sudo pacman -Rsu"
        alias ya="yaourt -S"
        alias yac="yaourt --noconfirm -S"
        function yas { yaourt --color -Ss $1 | ack --passthru $1 }
        alias yad="yaourt -Rsun"
    elif `which apt-get &>/dev/null`; then
        alias i="sudo apt-get install"
        alias is="sudo apt-get search"
    elif `which yum &>/dev/null`; then
        alias i="sudo yum install"
        alias is="sudo yum search"
        alias yac="sudo yum install -y"
        alias yad="sudo yum remove"
    fi
}

init-complex-aliases() {

    # Remove \n from fixed-widths txt's (For reading books)
    trim-fixed-width() {
        tr -d '\r' | tr '\n' '\r' | sed  -r 's/\r([^ ])/ \1/g' | tr '\r' '\n'
    }

    ssh() {
        ssh-add -l >/dev/null || ssh-add -t 8h
        /usr/bin/ssh "$@"
    }

    git-pr() {
        git fetch -fu origin refs/pull/$1/head:pr/$1
        git checkout pr/$1
    }

    git-prc() {
        git for-each-ref refs/heads/pr/* --format='%(refname)' | \
            while read ref; do git branch -D ${ref#refs/heads/}; done
    }

    # show files updated a number of days ago (default 1)
    recent() {
        find . -maxdepth 2 -type f -mtime -${1:-1}
    }

    # delete file, but save copy in /tmp
    trash() {
        mkdir -p /tmp/trash
        mv $1 /tmp/
    }

    # delete file, but save copy in /tmp
    wait4net() {
        echo "Waiting for internet (ping every sec)..."
        while ! ping 8.8.8.8 -c 1 >/dev/null 2>&1; do sleep 1; done
        echo "Internet at $(date)!"
        ding "Internet!"
    }

    # Make directory and cd into that
    mkcd() {
        mkdir -p "$@" && eval cd "\"\$$#\"";
    }

    sc-move-to-system() {
        sudo cp --no-preserve=ownership ~/.config/systemd/user/$1 /etc/systemd/system/ && \
        echo "File copied to /etc/systemd/system/$1"
    }

    # PLAY bell sound (at the end of long commands)
    bell() {
        (notify-send "${1:-Command complete}"
         aplay ~/Dropbox/confiles/linux/sounds/ding.wav 2>/dev/null &)
    }

    backup () {
        PREFIX=""
        if ! [[ -w $(dirname "$1") ]] ; then PREFIX="sudo" fi
        $PREFIX cp "$1" "$1.bak" && echo "Made backup $1.bak"
    }

    bak () {
        PREFIX=""
        if ! [[ -w $(dirname "$1") ]] ; then PREFIX="sudo" fi
        $PREFIX mv "$1" "$1.bak" && echo "$1 -> $1.bak"
    }
    unbak () {
        PREFIX=""
        if ! [[ -w $(dirname "$1.bak") ]] ; then PREFIX="sudo" fi
        $PREFIX mv "$1.bak" "$1" && echo "$1.bak -> $1"
    }
    saferm () {
        mv "$1" /media/hdd-backup/Trash
    }

    sms () {
        m start -a android.intent.action.VIEW -d sms:$1 --es sms_body "Hello" --ez exit_on_sent true
    }

    my-find() {
        if [[ $# == 1 ]] ; then
            CMD="find . -iname \"*$1*\""
        else
            CMD="find $1 -iname \"*$2*\" $3"
        fi
        echo $CMD
        eval $CMD
    }

    # fe [FUZZY PATTERN] - Open the selected file with the default editor
    #   - Bypass fuzzy finder if there's only one match (--select-1)
    #   - Exit if there's no match (--exit-0)
    # fe() {
    #     local file
    #     file=$(fzf --query="$1" --select-1 --exit-0)
    #     [ -n "$file" ] && ${EDITOR:-vim} "$file"
    # }

    # Modified version where you can press
    #   - CTRL-O to open with `open` command,
    #   - CTRL-E or Enter key to open with the $EDITOR
    fo() {
        local out file key
        out=$(fzf-tmux --query="$1" --exit-0 --expect=ctrl-o,ctrl-e)
        key=$(head -1 <<< "$out")
        file=$(head -2 <<< "$out" | tail -1)
        if [ -n "$file" ]; then
            [ "$key" = ctrl-o ] && open "$file" || ${EDITOR:-vim} "$file"
        fi
    }

    docker-start() {
        SRV=$(systemctl show "openvpn@*" --state active -p Id --value)
        sc-stop $SRV && sc-start docker && sc-start $SRV && echo Service $SRV active again
    }


    # Shows who is listening port $1 with process info

    # # fd - cd to selected directory
    # fd() {
    #     local dir
    #     dir=$(find ${1:-*} -path '*/\.*' -prune \
    #                -o -type d -print 2> /dev/null | fzf +m) && cd "$dir"
    # }

    # fda - including hidden directories
    fda() {
        local dir
        dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
    }

    # cdf - cd into the directory of the selected file
    cdf() {
        local file
        local dir
        file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
    }

    # generate random password
    genpass() {
        < /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c${1:-16}; echo;
    }

    # dbash() { docker exec -it $1 bash }

    fag() {
        ag --hidden --nobreak --nonumbers --noheading --depth 5 . | fzf
    }

    writecmd() {
        perl -e '$TIOCSTI = 0x5412; $l = <STDIN>; $lc = $ARGV[0] eq "-run" ? "\n" : ""; $l =~ s/\s*$/$lc/; map { ioctl STDOUT, $TIOCSTI, $_; } split "", $l;' -- $1
    }

    make-systemd-link() {
        if [[ -f ~/.config/systemd/user/$1 ]] ; then
            mv ~/.config/systemd/user/$1 ~/confiles/linux/config/systemd/user/
            ln -s ~/confiles/linux/config/systemd/user/${1:t} ~/.config/systemd/user/${1:t}
            echo "link done ~/confiles/linux/config/systemd/user/${1:t} -> ~/.config/systemd/user/${1:t}"
        else

            echo "no such user service ~/.config/systemd/user/$1"
        fi
    }

    # Downlaods a video from youtube to android
    andr-vid() {
        mkcd ~/Android/Videos/${2:-/}
        youtube-dl "$1" -f 'bestvideo[width<=1280]+bestaudio/best[width<=1280]'  --write-sub  --write-description
        ding "video downloaded"
    }

    fzf-locate() { locate "*" | fzf -e }
    fzf-playonlinux() { playonlinux --run '$(ls ~/.PlayOnLinux/shortcuts | fzf -e)' ;}

    # clock out from emacs if script exists
    _emacs-clock-out() {
        =emacs-clock-out 2>/dev/null && emacs-clock-out
    }
}

init-bindkeys() {
    # Transponse two command arguments before cursor.
    toggle-vim() {
        bindkey -v
    }

    # Transponse two command arguments before cursor.
    widget-transponse-args() {
        # z flag is for split string as shell parsing to find words
        array=${(z)LBUFFER}
        count=${#array}
        if [[ $count > 1 ]] ; then
            LBUFFER="${array[@]:0:$(($count - 2))} ${array[$count]} ${array[$(($count - 1))@]}"
        fi
    }

    zle -N widget-transponse-args
    bindkey '^[t' widget-transponse-args

    # Allow multi-selections from menu using Ctrl+o
    # Not works in busybox
    # bindkey -M menuselect '\C-o' accept-and-menu-complete
    bindkey '\C-i' complete-word
    bindkey '\e#' pound-insert

    zle -N toggle-vim
    bindkey '\C-z' toggle-vim

    # autoload -U -- ~/dotfiles/.zshfunc/[^_]*(:t)

    # Ctrl-X, U - and you can enter any name of widget to execute
    bindkey '\C-xu' universal-argument
    #bindkey '^R' history-incremental-search-backward


    # C-S inserts sudo before line
    insert_sudo () { zle beginning-of-line; zle -U "sudo " }
    zle -N insert-sudo insert_sudo
    bindkey "^[s" insert-sudo

    # When I edit path I often press C-h for deleting part of it like in helm
    # function dir-up { cd ..; zle reset-prompt }
    # zle -N dir-up
    # bindkey "^h" dir-up


    function dir-back { cd -1; zle reset-prompt }
    zle -N dir-back
    bindkey "^l" dir-back
    bindkey "^L" clear-screen

    # Auto ls on RET
    my-lsret() { [[ -z $BUFFER ]] && BUFFER=' ls -lth --group-directories-first'; zle accept-line }
    zle -N my-lsret
    bindkey "" my-lsret

    x-copy-region-as-kill () {
        zle copy-region-as-kill
        print -rn $CUTBUFFER | xsel -b -i
    }
    zle -N x-copy-region-as-kill
    bindkey -e '\ew' x-copy-region-as-kill
    bindkey -e '^W' x-copy-region-as-kill

    bindkey -e '\en' history-search-forward


    # Ctrl+SPC - find mark, Ctrl+K - add mark, Ctrl+T - jump to next field
    # MARKER_DATA_HOME=$HOME/confiles/linux/config/marker/marks.txt
    # [[ -s "$HOME/.local/share/marker/marker.sh" ]] && source "$HOME/.local/share/marker/marker.sh"
}


init-at-the-end() {

    # Terminal in emacs do not show nice glyphs :( --workaround
    if [[ -n ${INSIDE_EMACS} ]]; then
        # This shell runs inside an Emacs *shell*/*term* buffer.
        #prompt walters
        unsetopt zle
        PS1='%{$terminfo[bold]$fg[green]%}%n@%m%{$reset_color%} %{$terminfo[bold]$fg[blue]%}%~%{$reset_color%} $ '
    else
        #Fix backspace issue when using rxvt + ssh
        export TERM='xterm'
    fi



    # I use my own upgrade in ~/bin
    type upgrade | grep alias &>/dev/null && unset -f upgrade
    #type upgrade | grep alias &>/dev/null && unalias upgrade
}

init-local-zsh() {
    if [[ -f ~/.zshrc_local ]] ; then
        source ~/.zshrc_local
    fi
}

# if [[ "$TERM" == "dumb" && -z "$EMACS" ]]
# then
#     unsetopt zle
#     unsetopt prompt_cr
#     unsetopt prompt_subst
#     init-local-zsh
#     PS1='$ '
#     return
# fi

# Emacs tramp mode (INSIDE_EMACS is not set)
if [[ "$TERM" == "dumb" && -z "$INSIDE_EMACS" ]]; then
    unsetopt zle
    unsetopt prompt_cr
    unsetopt prompt_subst
    PS1='$ '
    return
fi

init-base-settings
init-oh-my-zsh
init-simple-aliases
init-complex-aliases

if [[ -z "$INSIDE_EMACS" ]] ; then
    init-bindkeys
    init-fzf
fi

init-at-the-end
init-local-zsh
